generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  SPANISH @map("es-ES") // Spanish (Spain)
  ENGLISH @map("en-US") // English (United States)
}

model codigo {
  id_codigo     Int        @id @default(autoincrement())
  nombre_codigo String     @db.VarChar(255)
  descripcion   String?
  seccion_id    Int
  seccion       seccion    @relation(fields: [seccion_id], references: [id_seccion], onDelete: Cascade)
  parent_id     Int?
  parent        codigo?    @relation("CodigoToCodigo", fields: [parent_id], references: [id_codigo])
  children      codigo[]   @relation("CodigoToCodigo")
  registro      registro[]
}

model grupo_edad {
  id_grupo_edad     Int        @id @default(autoincrement())
  nombre_grupo_edad String     @db.VarChar(255)
  descripcion       String?
  edad_minima       Int?
  edad_maxima       Int?
  registro          registro[]
}

model operador {
  id_operador     Int               @id
  persona         persona           @relation(fields: [id_operador], references: [id_persona], onDelete: Cascade, onUpdate: NoAction)
  registro_diario registro_diario[]
}

model permiso {
  id_permiso     Int           @id @default(autoincrement())
  nombre_permiso String        @db.VarChar(255)
  descripcion    String?
  rol_permiso    rol_permiso[]
}

model persona {
  id_persona Int       @id @default(autoincrement())
  nombre     String    @db.VarChar(255)
  apellido   String    @db.VarChar(255)
  email      String    @unique @db.VarChar(255)
  telefono   String?   @db.VarChar(20)
  operador   operador?
  usuario    usuario?
}

model registro_diario {
  id          Int        @id @default(autoincrement())
  fecha       DateTime   @default(now())
  id_operador Int
  operador    operador   @relation(fields: [id_operador], references: [id_operador], onDelete: Cascade)
  entries     registro[] @relation("batch_entries")

  @@unique([fecha, id_operador]) // only one batch per operator+date
  @@index([fecha, id_operador])
}

model registro {
  id_registro        Int             @id @default(autoincrement())
  id_registro_diario Int
  registro_diario    registro_diario @relation("batch_entries", fields: [id_registro_diario], references: [id])
  id_codigo          Int
  codigo             codigo          @relation(fields: [id_codigo], references: [id_codigo], onDelete: Cascade)
  id_grupo_edad      Int? // nullable when no age-group
  grupo_edad         grupo_edad?     @relation(fields: [id_grupo_edad], references: [id_grupo_edad], onDelete: Cascade)
  cantidad           Int

  @@unique([id_registro_diario, id_codigo, id_grupo_edad])
  @@index([id_registro_diario])
}

model rol {
  id_rol      Int           @id @default(autoincrement())
  nombre_rol  String        @db.VarChar(255)
  descripcion String?
  rol_permiso rol_permiso[]
  usuario     usuario[]
}

model rol_permiso {
  id_rol     Int
  id_permiso Int
  permiso    permiso @relation(fields: [id_permiso], references: [id_permiso], onDelete: Cascade, onUpdate: NoAction)
  rol        rol     @relation(fields: [id_rol], references: [id_rol], onDelete: Cascade, onUpdate: NoAction)

  @@id([id_rol, id_permiso])
}

model seccion {
  id_seccion     Int      @id @default(autoincrement())
  nombre_seccion String   @db.VarChar(255)
  descripcion    String?
  codigos        codigo[]
}

model usuario {
  id_usuario     Int      @id
  contrasena     String   @db.VarChar(255)
  fecha_creacion DateTime @default(now()) @db.Timestamp(6)
  language       Language @default(SPANISH)
  id_rol         Int
  rol            rol      @relation(fields: [id_rol], references: [id_rol], onDelete: Cascade, onUpdate: NoAction)
  persona        persona  @relation(fields: [id_usuario], references: [id_persona], onDelete: Cascade, onUpdate: NoAction)
}
